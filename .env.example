# To make your own .env file, copy this file to .env and modify the values as needed.
# Then, run `source .env` to load the environment variables into your shell.
# (Alternatively, could run e.g. `export SECRET_KEY=12345` (in a shell) to manually set a single env var.)

# Secret key: used to sign the session cookies cryptographically. This means that the user could
# look at the contents of the cookie, but not modify it without knowing this secret key.
#   - Generate with: python -c 'import secrets; print(secrets.token_hex())'
#   - Put it in .env as follows: SECRET_KEY = '<secret key>'
#   - See: https://flask.palletsprojects.com/en/3.0.x/quickstart/#sessions
#   - and: https://flask.palletsprojects.com/en/2.3.x/tutorial/deploy/#configure-the-secret-key
# (Note - the below key is just an example, DO NOT use it in production)
FLASK_SECRET_KEY = "9d856fb340bb797805e0ccc5e5015837fb5725eb7d22925609035bfb929bbac5"

# Challenge flags (again, have been modified from the production flags)
FLASK_SQLI1_FLAG = "SAP{BOBBY_TABLES}"

# Could also manually override the database paths, e.g. SQLI_DATABASE="sqli.db"

# For development, just test with: `python3 src/vulnerable_webapp_scorpiontornado/app.py`
#   Or, to debug (auto-restart on change): `flask --app vulnerable_webapp_scorpiontornado/app run --debug`
# But, if you wanted to test the WSGI server (gunicorn) before deploying to Heroku, could configure the
#   default number of gunicorn worker processes by putting the following in .env:
#       WEB_CONCURRENCY=3
#   Then, in terminal, run the server with: `gunicorn 'vulnerable_webapp_scorpiontornado:create_app()'`
# Can override the number of worker processes with the -w flag:
#   gunicorn -w 4 'vulnerable_webapp_scorpiontornado:create_app()'` (note - don't type the ``)